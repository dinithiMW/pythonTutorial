from math import sqrt
import matplotlib.pyplot as plt
import numpy
import pandas as pd
from sklearn.metrics import mean_squared_error, confusion_matrix, classification_report, mean_absolute_error, \
    plot_roc_curve
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.svm import SVC
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.metrics import f1_score, accuracy_score

np.random.seed(82)
# loading data file
dataset = pd.read_csv("dataset12.csv")

print(dataset.head())
print(dataset.shape)

x = dataset.iloc[:, 7:27]
y = dataset.iloc[:, 5]

# replace missing values
imp = SimpleImputer(missing_values=np.nan, strategy='mean')
imp = imp.fit(x)

x_imp = imp.transform(x)

x_train, x_test, y_train, y_test = train_test_split(x_imp, y, test_size=0.20, random_state=100)

le = LabelEncoder()
le = le.fit(y_train)

le_y_train = pd.Series(le.transform(y_train))
print(le_y_train)

le_y_test = le.transform(y_test)
print(le_y_test)

model = SVC(kernel='linear')
model.fit(x_train, le_y_train)

y_predict = model.predict(x_test)
print(y_predict)

# performance of the model on the test
corr_matrix = numpy.corrcoef(le_y_test, y_predict)
corr = corr_matrix[0, 1]
R_sq = corr ** 2
print("R_squared is", R_sq)
recall = metrics.recall_score(le_y_test, y_predict)
precision = metrics.precision_score(le_y_test, y_predict)
print("Recall (all 1s predicted right):", round(recall, 2))
print("Precision (confidence when predicting a 1):", round(precision, 2))
print("Detail:")
print("Accuracy is", accuracy_score(le_y_test, y_predict))

# taking root of mean squared error
root_mean_squared_error = sqrt(mean_squared_error(le_y_test, y_predict))
print("RMSE is", root_mean_squared_error)

MAE = mean_absolute_error(le_y_test, y_predict)
print("MAPE is", MAE)

print("Mean squared error", mean_squared_error(le_y_test, y_predict))
print(confusion_matrix(le_y_test, y_predict))
print(classification_report(le_y_test, y_predict))


